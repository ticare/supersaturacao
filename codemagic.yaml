workflows:
  ios-ipa-build:
    name: Gerar IPA para Teste
    max_build_duration: 60
    instance_type: mac_mini_m1
    environment:
      vars:
        # Ajuste estes valores conforme seu projeto
        XCODE_PROJECT: "clone.xcodeproj" # Nome do seu projeto
        BUNDLE_IDENTIFIER: "fabiano.oliveira@ticare.com.br" # Seu bundle ID
      xcode: latest
      cocoapods: default
    scripts:
      - name: Verificar estrutura do projeto
        script: |
          echo "=== Verificando projeto ==="
          ls -la
          echo -e "\nProjetos encontrados:"
          find . -name "*.xcodeproj" -type d

      - name: Analisar targets e schemes disponíveis
        script: |
          echo "=== Analisando projeto ==="
          PROJECT_FILE=$(find . -name "*.xcodeproj" -type d | head -n 1)

          if [ -n "$PROJECT_FILE" ]; then
            echo "Projeto encontrado: $PROJECT_FILE"
            xcodebuild -list -project "$PROJECT_FILE"
          else
            echo "❌ Nenhum projeto .xcodeproj encontrado!"
            exit 1
          fi

      - name: Instalar dependências (se houver CocoaPods)
        script: |
          if [ -f "Podfile" ]; then
            echo "📦 Instalando CocoaPods..."
            pod install
          else
            echo "✅ Nenhum Podfile encontrado, pulando CocoaPods"
          fi

      - name: Criar scheme compartilhado automaticamente
        script: |
          PROJECT_FILE=$(find . -name "*.xcodeproj" -type d | head -n 1)

          # Pegar o primeiro target disponível
          FIRST_TARGET=$(xcodebuild -list -project "$PROJECT_FILE" | grep -A 1000 "Targets:" | grep -v "Targets:" | grep -v "Build Configurations:" | sed 's/^[[:space:]]*//' | grep -v '^$' | head -n 1)

          echo "🎯 Target principal: $FIRST_TARGET"

          # Criar diretório para schemes compartilhados
          mkdir -p "$PROJECT_FILE/xcshareddata/xcschemes"

          # Gerar scheme automaticamente
          SCHEME_NAME="$FIRST_TARGET"
          echo "📋 Criando scheme: $SCHEME_NAME"

          # Fazer um build de teste para gerar o scheme
          xcodebuild -project "$PROJECT_FILE" -target "$FIRST_TARGET" -configuration Debug -showBuildSettings > /dev/null 2>&1 || true

      - name: Configurar assinatura de código (desenvolvimento)
        script: |
          echo "🔑 Configurando assinatura para desenvolvimento..."

          PROJECT_FILE=$(find . -name "*.xcodeproj" -type d | head -n 1)
          FIRST_TARGET=$(xcodebuild -list -project "$PROJECT_FILE" | grep -A 1000 "Targets:" | grep -v "Targets:" | grep -v "Build Configurations:" | sed 's/^[[:space:]]*//' | grep -v '^$' | head -n 1)

          # Configurar para desenvolvimento sem assinatura específica
          xcodebuild -project "$PROJECT_FILE" \
                     -target "$FIRST_TARGET" \
                     -configuration Release \
                     -showBuildSettings | grep PRODUCT_BUNDLE_IDENTIFIER || true

      - name: Build do arquivo IPA
        script: |
          echo "🚀 Iniciando build do IPA..."

          PROJECT_FILE=$(find . -name "*.xcodeproj" -type d | head -n 1)
          FIRST_TARGET=$(xcodebuild -list -project "$PROJECT_FILE" | grep -A 1000 "Targets:" | grep -v "Targets:" | grep -v "Build Configurations:" | sed 's/^[[:space:]]*//' | grep -v '^$' | head -n 1)

          # Tentar build com scheme primeiro
          SCHEME_EXISTS=$(xcodebuild -list -project "$PROJECT_FILE" | grep -A 1000 "Schemes:" | grep "$FIRST_TARGET" | head -n 1 | sed 's/^[[:space:]]*//')

          if [ -n "$SCHEME_EXISTS" ]; then
            echo "✅ Usando scheme: $FIRST_TARGET"
            xcodebuild archive \
              -project "$PROJECT_FILE" \
              -scheme "$FIRST_TARGET" \
              -configuration Release \
              -archivePath "$PWD/build/$FIRST_TARGET.xcarchive" \
              -sdk iphoneos \
              CODE_SIGN_IDENTITY="" \
              CODE_SIGNING_REQUIRED=NO \
              CODE_SIGNING_ALLOWED=NO
          else
            echo "⚠️  Scheme não encontrado, usando target diretamente"
            xcodebuild \
              -project "$PROJECT_FILE" \
              -target "$FIRST_TARGET" \
              -configuration Release \
              -sdk iphoneos \
              CONFIGURATION_BUILD_DIR="$PWD/build" \
              CODE_SIGN_IDENTITY="" \
              CODE_SIGNING_REQUIRED=NO \
              CODE_SIGNING_ALLOWED=NO \
              clean build
          fi

      - name: Gerar arquivo IPA
        script: |
          echo "📱 Gerando arquivo IPA..."

          # Procurar pelo arquivo .app gerado
          APP_FILE=$(find build -name "*.app" | head -n 1)

          if [ -n "$APP_FILE" ]; then
            echo "✅ App encontrado: $APP_FILE"
            
            # Criar estrutura para IPA
            mkdir -p Payload
            cp -R "$APP_FILE" Payload/
            
            # Criar arquivo IPA
            zip -r app.ipa Payload/
            
            echo "🎉 IPA gerado com sucesso: app.ipa"
            ls -la app.ipa
          else
            echo "❌ Arquivo .app não encontrado!"
            echo "Arquivos disponíveis em build/:"
            find build -type f 2>/dev/null || echo "Diretório build não existe"
            exit 1
          fi

      - name: Verificar IPA gerado
        script: |
          if [ -f "app.ipa" ]; then
            echo "✅ Arquivo IPA criado com sucesso!"
            echo "📊 Tamanho do arquivo:"
            ls -lh app.ipa
            
            echo -e "\n📋 Conteúdo do IPA:"
            unzip -l app.ipa | head -20
          else
            echo "❌ Falha na geração do IPA"
            exit 1
          fi

    artifacts:
      - app.ipa
      - build/**/*.app
      - build/**/*.xcarchive
      - /tmp/xcodebuild_logs/*.log

    publishing:
      email:
        recipients:
          - fabiano.oliveira@ticare.com.br # Substitua pelo seu email
        notify:
          success: true
          failure: true
