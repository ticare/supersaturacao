workflows:
  ios-flutter-build:
    name: Flutter iOS - Gerar IPA
    max_build_duration: 60
    instance_type: mac_mini_m1
    environment:
      vars:
        # Configurações do seu projeto
        BUNDLE_IDENTIFIER: "fabiano.oliveira@ticare.com.br"
        APP_NAME: "APP RAM Supersaturação"
      flutter: stable
      xcode: latest
      cocoapods: default

    scripts:
      - name: Diagnóstico do projeto Flutter
        script: |
          echo "🐦 DIAGNÓSTICO DO PROJETO FLUTTER"
          echo "================================="

          # Verificar se é projeto Flutter
          if [ ! -f "pubspec.yaml" ]; then
            echo "❌ Este não é um projeto Flutter! pubspec.yaml não encontrado."
            exit 1
          fi

          echo "✅ Projeto Flutter confirmado"

          echo -e "\n📁 Estrutura do projeto:"
          ls -la

          echo -e "\n📱 Verificando pasta ios:"
          ls -la ios/ 2>/dev/null || echo "❌ Pasta ios não encontrada"

          echo -e "\n📋 Conteúdo do pubspec.yaml:"
          cat pubspec.yaml | head -20

          echo -e "\n🔍 Verificando configurações iOS:"
          ls -la ios/Runner/ 2>/dev/null || echo "❌ Pasta ios/Runner não encontrada"

          # Verificar se existe o projeto Xcode
          if [ -f "ios/Runner.xcodeproj/project.pbxproj" ]; then
            echo "✅ Projeto Xcode encontrado"
          else
            echo "❌ Projeto Xcode não encontrado"
          fi

      - name: Limpar e configurar Flutter
        script: |
          echo "🧹 Limpando projeto Flutter..."

          # Limpar Flutter
          flutter clean

          # Verificar instalação do Flutter
          echo "🔍 Verificando Flutter:"
          flutter --version
          flutter doctor -v

          # Instalar dependências
          echo "📦 Instalando dependências Flutter..."
          flutter pub get

          # Verificar se pub get funcionou
          if [ $? -eq 0 ]; then
            echo "✅ Dependências Flutter instaladas"
          else
            echo "❌ Erro ao instalar dependências Flutter"
            exit 1
          fi

      - name: Configurar projeto iOS
        script: |
          echo "🍎 Configurando projeto iOS..."

          cd ios

          # Verificar se existe Podfile
          if [ ! -f "Podfile" ]; then
            echo "❌ Podfile não encontrado!"
            echo "Gerando Podfile básico..."
            cd ..
            flutter build ios --config-only
            cd ios
          fi

          echo "📦 Instalando CocoaPods..."
          pod deintegrate 2>/dev/null || echo "Nenhuma integração anterior para remover"
          pod install --repo-update

          if [ $? -eq 0 ]; then
            echo "✅ CocoaPods instalado com sucesso"
          else
            echo "❌ Erro ao instalar CocoaPods"
            exit 1
          fi

          cd ..

          # Gerar arquivos de configuração iOS
          echo "⚙️ Gerando configurações iOS..."
          flutter build ios --config-only --release

          # Verificar se Generated.xcconfig foi criado
          if [ -f "ios/Flutter/Generated.xcconfig" ]; then
            echo "✅ Generated.xcconfig criado com sucesso"
            echo "📋 Conteúdo do Generated.xcconfig:"
            cat ios/Flutter/Generated.xcconfig
          else
            echo "❌ Generated.xcconfig não foi criado!"
            echo "Tentando criar manualmente..."
            mkdir -p ios/Flutter
            echo "FLUTTER_ROOT=/Users/builder/programs/flutter" > ios/Flutter/Generated.xcconfig
            echo "FLUTTER_APPLICATION_PATH=/Users/builder/clone" >> ios/Flutter/Generated.xcconfig
            echo "COCOAPODS_PARALLEL_CODE_SIGN=true" >> ios/Flutter/Generated.xcconfig
          fi

      - name: Configurar Bundle ID e assinatura
        script: |
          echo "🔑 Configurando Bundle ID e assinatura..."

          # Configurar Bundle ID usando Flutter
          if [ -n "$BUNDLE_IDENTIFIER" ]; then
            echo "📱 Configurando Bundle ID: $BUNDLE_IDENTIFIER"
            
            # Verificar se o arquivo Info.plist existe
            if [ -f "ios/Runner/Info.plist" ]; then
              echo "✅ Info.plist encontrado"
            else
              echo "❌ Info.plist não encontrado"
            fi
            
            # Listar schemes disponíveis
            echo "📋 Schemes disponíveis:"
            xcodebuild -list -workspace ios/Runner.xcworkspace 2>/dev/null || xcodebuild -list -project ios/Runner.xcodeproj
          fi

      - name: Build Flutter iOS
        script: |
          echo "🚀 Fazendo build do Flutter para iOS..."

          # Build Flutter para iOS sem codesign
          flutter build ios \
            --release \
            --no-codesign \
            --target-platform ios \
            --dart-define=flutter.inspector.structuredErrors=false

          if [ $? -eq 0 ]; then
            echo "✅ Build Flutter iOS concluído com sucesso"
          else
            echo "❌ Erro no build Flutter iOS"
            
            echo "🔍 Verificando logs de erro..."
            # Tentar build mais verboso
            flutter build ios --release --no-codesign --verbose
            exit 1
          fi

          # Verificar se o .app foi gerado
          APP_PATH="build/ios/iphoneos/Runner.app"
          if [ -d "$APP_PATH" ]; then
            echo "✅ Arquivo .app gerado: $APP_PATH"
            ls -la "$APP_PATH"
          else
            echo "❌ Arquivo .app não encontrado em $APP_PATH"
            echo "🔍 Procurando arquivo .app..."
            find build -name "*.app" -type d 2>/dev/null || echo "Nenhum .app encontrado"
          fi

      - name: Gerar arquivo IPA
        script: |
          echo "📱 Gerando arquivo IPA..."

          # Localizar o arquivo .app
          APP_FILE=$(find build -name "*.app" -type d | head -n 1)

          if [ -z "$APP_FILE" ]; then
            echo "❌ Arquivo .app não encontrado!"
            echo "📁 Conteúdo do diretório build:"
            find build -type d -name "*.app" 2>/dev/null || echo "Nenhum diretório .app encontrado"
            find build -type f -name "Runner" 2>/dev/null || echo "Nenhum executável Runner encontrado"
            exit 1
          fi

          echo "✅ App encontrado: $APP_FILE"

          # Verificar conteúdo do .app
          echo "📋 Conteúdo do app:"
          ls -la "$APP_FILE"

          # Verificar se o executável existe
          APP_NAME=$(basename "$APP_FILE" .app)
          if [ -f "$APP_FILE/$APP_NAME" ]; then
            echo "✅ Executável encontrado: $APP_FILE/$APP_NAME"
          else
            echo "❌ Executável não encontrado em $APP_FILE/$APP_NAME"
            echo "📋 Conteúdo detalhado:"
            find "$APP_FILE" -type f
          fi

          # Criar estrutura Payload
          echo "📦 Criando estrutura IPA..."
          rm -rf Payload
          mkdir Payload
          cp -R "$APP_FILE" Payload/

          # Verificar cópia
          if [ -d "Payload/$(basename "$APP_FILE")" ]; then
            echo "✅ App copiado para Payload"
          else
            echo "❌ Erro ao copiar app para Payload"
            exit 1
          fi

          # Criar IPA
          echo "🗜️ Criando arquivo IPA..."
          zip -r "app-ram-supersaturacao.ipa" Payload/

          if [ -f "app-ram-supersaturacao.ipa" ]; then
            echo "🎉 IPA gerado com sucesso!"
            ls -lh "app-ram-supersaturacao.ipa"
          else
            echo "❌ Falha ao criar IPA"
            exit 1
          fi

      - name: Verificar IPA final
        script: |
          if [ -f "app-ram-supersaturacao.ipa" ]; then
            echo "✅ Verificação final do IPA:"
            echo "📊 Tamanho: $(ls -lh app-ram-supersaturacao.ipa | awk '{print $5}')"
            echo "📋 Estrutura interna:"
            unzip -l app-ram-supersaturacao.ipa | head -10
            
            # Verificar se o IPA contém o executável
            unzip -l app-ram-supersaturacao.ipa | grep -E "(Runner|executable)" && echo "✅ Executável presente" || echo "⚠️ Executável pode estar ausente"
          else
            echo "❌ IPA não foi gerado"
            exit 1
          fi

    artifacts:
      - app-ram-supersaturacao.ipa
      - build/ios/iphoneos/*.app/**
      - ios/Flutter/Generated.xcconfig

    publishing:
      email:
        recipients:
          - fabiano.oliveira@ticare.com.br
        notify:
          success: true
          failure: true
